Parameters:
  DomainCertificateArn:
    Description: Because there's no way to automate ACM's validation E2E without custom resources, do it offline (and then cut a feature request).
    Type: String
  DomainName:
    Description: The top-level domain *without* the trailing dot (NOT the FQDN), and WITHOUT any subdomain. E.g., "example.com"
    Type: String
    MaxLength: 1024
  CreateHostedZone:
    Description: Toggle to enable creation of the root hosted zone. Leave disabled when the domain was registered with Amazon Registrar.
    Type: String
    AllowedValues: ["true", "false"]
    Default: false
  Subdomain:
    Description: Additional subdomain that should be handled by the same bucket/distribution.
    Type: String
    Default: "www"
Conditions:
  CreateHostedZoneCondition:
    !Equals [true, !Ref CreateHostedZone]
  HasSubdomainCondition:
    !Not [{ 'Fn::Equals': ["", { Ref: Subdomain }] }]
Resources:
  DomainZone:
    Type: AWS::Route53::HostedZone
    Condition: CreateHostedZoneCondition
    Properties:
      Name: !Ref DomainName
  DomainRecords:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub '${DomainName}.'
      RecordSets:
        - Name: !Ref DomainName
          Type: A
          AliasTarget: 
            DNSName: !GetAtt Distribution.DomainName
            HostedZoneId: Z2FDTNDATAQYW2
  SubdomainRecords:
    Type: AWS::Route53::RecordSetGroup
    Condition: HasSubdomainCondition
    Properties: 
      HostedZoneName: !Sub '${DomainName}.'
      RecordSets:
        - Name: !Sub '${Subdomain}.${DomainName}'
          Type: A
          AliasTarget: 
            DNSName: !GetAtt Distribution.DomainName
            HostedZoneId: Z2FDTNDATAQYW2
  StaticFilesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticFilesBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal: { Service: 'cloudfront.amazonaws.com' }
          Action: s3:GetObject
          Resource: !Sub 'arn:aws:s3:::${StaticFilesBucket}/*'
          Condition:
            StringEquals: { 'AWS:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${Distribution.Id}'}
  StaticFilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DomainName
  DistributionAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties: 
      OriginAccessControlConfig: 
          Name: !Sub 'AccessControl${DomainName}'
          OriginAccessControlOriginType: s3
          SigningBehavior: always
          SigningProtocol: sigv4
  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        HttpVersion: http2
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: false
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
          SslSupportMethod: sni-only
          AcmCertificateArn: !Ref DomainCertificateArn
          MinimumProtocolVersion: TLSv1.2_2018
        Aliases:
          - !Ref DomainName
          - !Sub '${Subdomain}.${DomainName}'
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt StaticFilesBucket.RegionalDomainName
            OriginAccessControlId: !Ref DistributionAccessControl
            S3OriginConfig:
              OriginAccessIdentity: ''
